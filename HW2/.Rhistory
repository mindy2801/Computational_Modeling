## model_select.R                                    ##
## PSYCH 7695, Spring 2017                           ##
## Maximum Likelihood Estimation (Myung, JMP, 2003)  ##
## By Yun Tang, Psychology, OSU                      ##
##                                                   ##
## Main Program                                      ##
## Code Written on 12/18/2009                        ##
##                                                   ##
## Modified by Joonsuk Park on Jan 28 2015           ##
## Modified by Jay Myung in Feb 2017                 ##
## Modified by Woo-Young Ahn in March 2018           ##
#######################################################
# Loading the (minus) log-likelihood functions
# Please modify the path according to the actual location of the file "MLE_LSE.R"
# e.g., setwd("/Users/youngahn/this-course/")
rm(list=ls())  # clear workspace
graphics.off() # close all figures
set.seed(08826)  # set a seed number for replication
source("MLE.R")   # source MLE.R code
##########################
## General Setup        ##
## Data and Parameters  ##
##########################
n_total <- 50 # sample size
t_int <- c(0.5, 1, 2, 4, 8, 12, 16, 18) # time interval values
n_corr <- c(44, 34, 27, 26, 19, 17, 20, 11) # number of correct responses
p_corr <- n_corr/n_total # proportion correct
# Generate random uniform numbers between 0 and 1 to use as initials for the optim procedure
param1_init <- runif(1)
param2_init <- runif(2)
param3_init <- runif(3)
init <- list(param1_init, param2_init, param1_init, param2_init, param3_init, param1_init, param2_init)
param_pow1_low <- c(0); param_pow1_up <- c(3);
param_pow2_low <- c(0, 0); param_pow2_up <- c(1, 3);  # lower and upper bounds of POW2 model (0<a<1, 0<b<3)
param_exp1_low <- c(0); param_exp1_up <- c(3);
param_exp2_low <- c(0, 0); param_exp2_up <- c(1, 3);  # lower and upper bounds of EXP2 model (0<a<1, 0<b<3)
param_expow_low <- c(0, 0, -Inf); param_expow_up <- c(1, Inf, 3);
param_hyp1_low <- c(0); param_hyp1_up <- c(1);
param_hyp2_low <- c(0, 0); param_hyp2_up <- c(1, 1);
param_low <- list(param_pow1_low, param_pow2_low, param_exp1_low, param_exp2_low, param_expow_low, param_hyp1_low, param_hyp2_low)
param_up <- list(param_pow1_up, param_pow2_up, param_exp1_up, param_exp2_up, param_expow_up, param_hyp1_up, param_hyp2_up)
##########################
## MLE                  ##
##########################
# Call general purpose optimization rountine
mle_model <- c(mle_pow1, mle_pow2, mle_exp1, mle_exp2, mle_expow, mle_hyp1, mle_hyp2)
mle_model_optim <- list()
for (model in 1:7){
mle_model_optim[[model]] <- optim(init[[model]], mle_model[[model]], method="L-BFGS-B", lower=param_low[[model]], upper=param_up[[model]], int=t_int, n=n_total, x=n_corr)
}
#mle_model_pow1 <- optim(param1_init, mle_pow1, method="L-BFGS-B", lower=param_pow1_low, upper=param_pow1_up, int=t_int, n=n_total, x=n_corr)
# Try many different inits to escape from the local maxima
for (i in 1:100) {
param1_init <- runif(1); param2_init <- runif(2); param3_init <- runif(3);
init <- list(param1_init, param2_init, param1_init, param2_init, param3_init, param1_init, param2_init)
temp_model <- list()
for (model in 1:7){
temp_model[[model]] <- optim(init[[model]], mle_model[[model]], method="L-BFGS-B", lower=param_low[[model]], upper=param_up[[model]], int=t_int, n=n_total, x=n_corr)
# Replace the results if the latest optimization yields better result
if(temp_model[[model]]$value < mle_model_optim[[model]]$value) mle_model_optim[[model]] <- temp_model[[model]]
}
}
# Save the MLE parameter estimates
param_model <- list()
for (model in 1:7){
param_model[[model]] <- mle_model_optim[[model]]$par
}
# number of parameters (k_modelName)
n_par <- c(1,2,1,2,3,1,2)
# number of data points (N)
N = length(p_corr)
# Compute AIC = -2*log(lik) + 2*K
AIC <- function(n_par=c(), mle_model_optim=list()){
values <- c()
for (model in 1:7){
values[model] <- 2*mle_model_optim[[model]]$value + 2*n_par[model]
}
values
}
all_AIC <- AIC(n_par, mle_model_optim)
# Compute BIC = -2*log(lik) + K*log(N)
BIC <- function(n_par=c(), N, mle_model_optim=list()){
values <- c()
for (model in 1:7){
values[model] <- 2*mle_model_optim[[model]]$value + n_par[model]*log(N)
}
values
}
all_BIC <- BIC(n_par, N, mle_model_optim)
# Generate summary
names = c("POW1","POW2","EXP1", "EXP2", "EXPOW", "HYP1", "HYP2")
modelcomp_summary = data.frame(Models = names, AIC = all_AIC, BIC = all_BIC)
print(modelcomp_summary)
=======
#######################################################
## model_select.R                                    ##
## PSYCH 7695, Spring 2017                           ##
## Maximum Likelihood Estimation (Myung, JMP, 2003)  ##
## By Yun Tang, Psychology, OSU                      ##
##                                                   ##
## Main Program                                      ##
## Code Written on 12/18/2009                        ##
##                                                   ##
## Modified by Joonsuk Park on Jan 28 2015           ##
## Modified by Jay Myung in Feb 2017                 ##
## Modified by Woo-Young Ahn in March 2018           ##
#######################################################
# Loading the (minus) log-likelihood functions
# Please modify the path according to the actual location of the file "MLE_LSE.R"
# e.g., setwd("/Users/youngahn/this-course/")
rm(list=ls())  # clear workspace
graphics.off() # close all figures
set.seed(08826)  # set a seed number for replication
source("MLE.R")   # source MLE.R code
##########################
## General Setup        ##
## Data and Parameters  ##
##########################
n_total <- 50 # sample size
t_int <- c(0.5, 1, 2, 4, 8, 12, 16, 18) # time interval values
n_corr <- c(44, 34, 27, 26, 19, 17, 20, 11) # number of correct responses
p_corr <- n_corr/n_total # proportion correct
# Generate random uniform numbers between 0 and 1 to use as initials for the optim procedure
param1_init <- runif(1)
param2_init <- runif(2)
param3_init <- runif(3)
param_pow2_low <- c(0, 0); param_pow2_up <- c(1, 3);  # lower and upper bounds of POW2 model (0<a<1, 0<b<3)
param_exp2_low <- c(0, 0); param_exp2_up <- c(1, 3);  # lower and upper bounds of EXP2 model (0<a<1, 0<b<3)
##########################
## MLE                  ##
##########################
# Call general purpose optimization rountine
mle_model_pow2 <- optim(param2_init, mle_pow2, method="L-BFGS-B", lower=param_pow2_low, upper=param_pow2_up, int=t_int, n=n_total, x=n_corr)
mle_model_exp2 <- optim(param2_init, mle_exp2, method="L-BFGS-B", lower=param_exp2_low, upper=param_exp2_up, int=t_int, n=n_total, x=n_corr)
# Try many different inits to escape from the local maxima
for (i in 1:100) {
# Re-generate random inits. Is it the best way to do this?
param1_init <- runif(1); param2_init <- runif(2); param3_init <- runif(3);
# Do the MLE again
temp_pow2 <- optim(param2_init, mle_pow2, method="L-BFGS-B", lower=param_pow2_low, upper=param_pow2_up, int=t_int, n=n_total, x=n_corr)
temp_exp2 <- optim(param2_init, mle_exp2, method="L-BFGS-B", lower=param_exp2_low, upper=param_exp2_up, int=t_int, n=n_total, x=n_corr)
# Replace the results if the latest optimization yields better result
if(temp_pow2$value < mle_model_pow2$value) mle_model_pow2 <- temp_pow2
if(temp_exp2$value < mle_model_exp2$value) mle_model_exp2 <- temp_exp2
}
# Save the MLE parameter estimates
parm_pow2 <- mle_model_pow2$par
parm_exp2 <- mle_model_exp2$par
# number of parameters (k_modelName)
k_pow2 <- 2
k_exp2 <- 2
# number of data points (N)
N = length(p_corr)
# Compute AIC = -2*log(lik) + 2*K
AIC_pow2 <- 2*mle_model_pow2$value + 2*k_pow2   # mle_model_pow2$value --> -log(lik)
AIC_exp2 <- 2*mle_model_exp2$value + 2*k_exp2
# Compute BIC = -2*log(lik) + K*log(N)
BIC_pow2 <- 2*mle_model_pow2$value + 2*log(N)   # mle_model_pow2$value --> -log(lik)
BIC_exp2 <- 2*mle_model_exp2$value + 2*log(N)
# Generate summary
all_AIC = round(c(AIC_pow2, AIC_exp2), 3)
all_BIC = round(c(BIC_pow2, BIC_exp2), 3)
names = c("POW2", "EXP2")
modelcomp_summary = data.frame(Models = names, AIC = all_AIC, BIC = all_BIC)
print(modelcomp_summary)
>>>>>>> Stashed changes
#######################################################
## model_select.R                                    ##
## PSYCH 7695, Spring 2017                           ##
## Maximum Likelihood Estimation (Myung, JMP, 2003)  ##
## By Yun Tang, Psychology, OSU                      ##
##                                                   ##
## Main Program                                      ##
## Code Written on 12/18/2009                        ##
##                                                   ##
## Modified by Joonsuk Park on Jan 28 2015           ##
## Modified by Jay Myung in Feb 2017                 ##
## Modified by Woo-Young Ahn in March 2018           ##
#######################################################
# Loading the (minus) log-likelihood functions
# Please modify the path according to the actual location of the file "MLE_LSE.R"
# e.g., setwd("/Users/youngahn/this-course/")
rm(list=ls())  # clear workspace
graphics.off() # close all figures
set.seed(08826)  # set a seed number for replication
source("MLE.R")   # source MLE.R code
##########################
## General Setup        ##
## Data and Parameters  ##
##########################
n_total <- 50 # sample size
t_int <- c(0.5, 1, 2, 4, 8, 12, 16, 18) # time interval values
n_corr <- c(44, 34, 27, 26, 19, 17, 20, 11) # number of correct responses
p_corr <- n_corr/n_total # proportion correct
# Generate random uniform numbers between 0 and 1 to use as initials for the optim procedure
param1_init <- runif(1)
param2_init <- runif(2)
param3_init <- runif(3)
init <- list(param1_init, param2_init, param1_init, param2_init, param3_init, param1_init, param2_init)
param_pow1_low <- c(0); param_pow1_up <- c(3);
param_pow2_low <- c(0, 0); param_pow2_up <- c(1, 3);  # lower and upper bounds of POW2 model (0<a<1, 0<b<3)
param_exp1_low <- c(0); param_exp1_up <- c(3);
param_exp2_low <- c(0, 0); param_exp2_up <- c(1, 3);  # lower and upper bounds of EXP2 model (0<a<1, 0<b<3)
param_expow_low <- c(0, 0, -Inf); param_expow_up <- c(1, Inf, 3);
param_hyp1_low <- c(0); param_hyp1_up <- c(1);
param_hyp2_low <- c(0, 0); param_hyp2_up <- c(1, 1);
param_low <- list(param_pow1_low, param_pow2_low, param_exp1_low, param_exp2_low, param_expow_low, param_hyp1_low, param_hyp2_low)
param_up <- list(param_pow1_up, param_pow2_up, param_exp1_up, param_exp2_up, param_expow_up, param_hyp1_up, param_hyp2_up)
##########################
## MLE                  ##
##########################
# Call general purpose optimization rountine
mle_model <- c(mle_pow1, mle_pow2, mle_exp1, mle_exp2, mle_expow, mle_hyp1, mle_hyp2)
mle_model_optim <- list()
for (model in 1:7){
mle_model_optim[[model]] <- optim(init[[model]], mle_model[[model]], method="L-BFGS-B", lower=param_low[[model]], upper=param_up[[model]], int=t_int, n=n_total, x=n_corr)
}
#mle_model_pow1 <- optim(param1_init, mle_pow1, method="L-BFGS-B", lower=param_pow1_low, upper=param_pow1_up, int=t_int, n=n_total, x=n_corr)
# Try many different inits to escape from the local maxima
for (i in 1:100) {
param1_init <- runif(1); param2_init <- runif(2); param3_init <- runif(3);
init <- list(param1_init, param2_init, param1_init, param2_init, param3_init, param1_init, param2_init)
temp_model <- list()
for (model in 1:7){
temp_model[[model]] <- optim(init[[model]], mle_model[[model]], method="L-BFGS-B", lower=param_low[[model]], upper=param_up[[model]], int=t_int, n=n_total, x=n_corr)
# Replace the results if the latest optimization yields better result
if(temp_model[[model]]$value < mle_model_optim[[model]]$value) mle_model_optim[[model]] <- temp_model[[model]]
}
}
# Save the MLE parameter estimates
param_model <- list()
for (model in 1:7){
param_model[[model]] <- mle_model_optim[[model]]$par
}
# number of parameters (k_modelName)
n_par <- c(1,2,1,2,3,1,2)
# number of data points (N)
N = length(p_corr)
# Compute AIC = -2*log(lik) + 2*K
AIC <- function(n_par=c(), mle_model_optim=list()){
values <- c()
for (model in 1:7){
values[model] <- 2*mle_model_optim[[model]]$value + 2*n_par[model]
}
values
}
all_AIC <- AIC(n_par, mle_model_optim)
# Compute BIC = -2*log(lik) + K*log(N)
BIC <- function(n_par=c(), N, mle_model_optim=list()){
values <- c()
for (model in 1:7){
values[model] <- 2*mle_model_optim[[model]]$value + n_par[model]*log(N)
}
values
}
all_BIC <- BIC(n_par, N, mle_model_optim)
# Generate summary
names = c("POW1","POW2","EXP1", "EXP2", "EXPOW", "HYP1", "HYP2")
modelcomp_summary = data.frame(Models = names, AIC = all_AIC, BIC = all_BIC)
print(modelcomp_summary)
save.image("C:/Users/CCSLAB1/Desktop/Computational_Modeling/HW2/model_select.RData")
kable(modelcomp_summary)
kable(modelcomp_summary, format="html", caption="Model Selection Results") %>%
kable_styling(full_width=F)
rm(list=ls())
raw_data <- read.table("ra_exampleData.txt", header=T)
source("ra_prospect.R")
subj_list = unique(raw_data$subjID)
N = length(subj_list)  # number of subjects
T = length(raw_data[raw_data$subjID==2,"outcome"]) # number of trials per subject
bound_low <- c(0, 0, 0); bound_up <- c(2, 5, 10)
par_init <- runif(3)*bound_up
rho <- par_init[1]; tau <- par_init[2]; lambda <- par_init[3]
# for a single subject=2
sub2_data <- raw_data[raw_data$subjID==2,]
attach(sub2_data)
mle_model <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
#iteration
attach(sub2_data)
for (i in 1:100){
par_init <- runif(3)*bound_up
temp_model <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
if(temp_model$value < mle_model$value) mle_model <- temp_model
}
detach(sub2_data)
mle_model$par
# calculate AIC and BIC
k <- 3
N <- 140
sub2_AIC <- 2*mle_model$value + 2*k
sub2_BIC <- 2*mle_model$value + k*log(N)
# for every subject. NEED TO CHECK FROM HERE
allsub_m1 <- list()
par_init <- runif(3)*bound_up
# loop for subject
for (subj in subj_list){
data <- raw_data[raw_data$subjID==subj,]
attach(data)
m1 <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
#loop for itteration
for (i in 1:50){
par_init <- runif(3)*bound_up
temp_m1 <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
if(temp_m1$value < m1$value){allsub_m1[[subj]] <- temp_m1}
}
detach(data)
}
detach(data)
detach(data)
detach(data)
rm(list=ls())
raw_data <- read.table("ra_exampleData.txt", header=T)
source("ra_prospect.R")
subj_list = unique(raw_data$subjID)
N = length(subj_list)  # number of subjects
T = length(raw_data[raw_data$subjID==2,"outcome"]) # number of trials per subject
bound_low <- c(0, 0, 0); bound_up <- c(2, 5, 10)
par_init <- runif(3)*bound_up
rho <- par_init[1]; tau <- par_init[2]; lambda <- par_init[3]
# for a single subject=2
sub2_data <- raw_data[raw_data$subjID==2,]
attach(sub2_data)
mle_model <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
#iteration
attach(sub2_data)
for (i in 1:100){
par_init <- runif(3)*bound_up
temp_model <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
if(temp_model$value < mle_model$value) mle_model <- temp_model
}
detach(sub2_data)
mle_model$par
# calculate AIC and BIC
k <- 3
N <- 140
sub2_AIC <- 2*mle_model$value + 2*k
sub2_BIC <- 2*mle_model$value + k*log(N)
# for every subject. NEED TO CHECK FROM HERE
allsub_m1 <- list()
par_init <- runif(3)*bound_up
# loop for subject
for (subj in subj_list){
data <- raw_data[raw_data$subjID==subj,]
attach(data)
m1 <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
#loop for itteration
for (i in 1:50){
par_init <- runif(3)*bound_up
temp_m1 <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
if(temp_m1$value < m1$value){allsub_m1[[subj]] <- temp_m1}
}
detach(data)
}
allsub_m1_par <- c()
allsub_m1_value <- c()
for(subj in subj_list){
allsub_m1_par <- rbind(allsub_m1_par, allsub_m1[[subj]]$par)
allsub_m1_value <- rbind(allsub_m1_value, allsub_m1[[subj]]$value)
}
##AIC and BIC
k <- 3
N <- 140*5
AIC <- 2*colSums(allsub_m1_value) + 2*k;AIC
BIC <- 2*colSums(allsub_m1_value) + k*log(N);BIC
### ra_noLA
allsub_m2 <- list()
# loop for subject
for (subj in subj_list){
par_init <- runif(2)*bound_up[1:2]
data <- raw_data[raw_data$subjID==subj,]
attach(data)
m2 <- optim(par_init, ra_noLA, T=T, method="L-BFGS-B", lower=bound_low[1:2], upper=bound_up[1:2])
#loop for iteration
for (i in 1:100){
par_init <- runif(2)*bound_up[1:2]
temp_m2 <- optim(par_init, ra_noLA, T=T, method="L-BFGS-B", lower=bound_low[1:2], upper=bound_up[1:2])
if(temp_m2$value < m2$value){allsub_m2[[subj]] <- temp_m2}
}
detach(data)
}
detach(data)
detach(data)
detach(data)
detach(data)
detach(raw_data)
detach(sub2_data)
detach(sub2_data)
detach(sub2_data)
detach(sub2_data)
detach(sub2_data)
rm(list=ls())
rm(list=ls())
raw_data <- read.table("ra_exampleData.txt", header=T)
source("ra_prospect.R")
subj_list = unique(raw_data$subjID)
N = length(subj_list)  # number of subjects
T = length(raw_data[raw_data$subjID==2,"outcome"]) # number of trials per subject
bound_low <- c(0, 0, 0); bound_up <- c(2, 5, 10)
par_init <- runif(3)*bound_up
rho <- par_init[1]; tau <- par_init[2]; lambda <- par_init[3]
# for a single subject=2
sub2_data <- raw_data[raw_data$subjID==2,]
attach(sub2_data)
mle_model <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
#iteration
attach(sub2_data)
for (i in 1:100){
par_init <- runif(3)*bound_up
temp_model <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
if(temp_model$value < mle_model$value) mle_model <- temp_model
}
detach(sub2_data)
mle_model$par
# calculate AIC and BIC
k <- 3
N <- 140
sub2_AIC <- 2*mle_model$value + 2*k
sub2_BIC <- 2*mle_model$value + k*log(N)
# for every subject. NEED TO CHECK FROM HERE
allsub_m1 <- list()
par_init <- runif(3)*bound_up
# loop for subject
for (subj in subj_list){
data <- raw_data[raw_data$subjID==subj,]
attach(data)
m1 <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
#loop for itteration
for (i in 1:50){
par_init <- runif(3)*bound_up
temp_m1 <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
if(temp_m1$value < m1$value){allsub_m1[[subj]] <- temp_m1}
}
detach(data)
}
allsub_m1_par <- c()
allsub_m1_value <- c()
for(subj in subj_list){
allsub_m1_par <- rbind(allsub_m1_par, allsub_m1[[subj]]$par)
allsub_m1_value <- rbind(allsub_m1_value, allsub_m1[[subj]]$value)
}
##AIC and BIC
k <- 3
N <- 140*5
AIC <- 2*colSums(allsub_m1_value) + 2*k;AIC
BIC <- 2*colSums(allsub_m1_value) + k*log(N);BIC
### ra_noLA
allsub_m2 <- list()
# loop for subject
for (subj in subj_list){
par_init <- runif(2)*bound_up[1:2]
data <- raw_data[raw_data$subjID==subj,]
attach(data)
m2 <- optim(par_init, ra_noLA, T=T, method="L-BFGS-B", lower=bound_low[1:2], upper=bound_up[1:2])
#loop for iteration
for (i in 1:100){
par_init <- runif(2)*bound_up[1:2]
temp_m2 <- optim(par_init, ra_noLA, T=T, method="L-BFGS-B", lower=bound_low[1:2], upper=bound_up[1:2])
if(temp_m2$value < m2$value){allsub_m2[[subj]] <- temp_m2}
}
detach(data)
}
allsub_m2_par <- c()
allsub_m2_value <- c()
for(subj in subj_list){
allsub_m2_par <- rbind(allsub_m2_par, allsub_m2[[subj]]$par)
allsub_m2_value <- rbind(allsub_m2_value, allsub_m2[[subj]]$value)
}
k = 2
N <- 140*5
AIC2 <- 2*colSums(allsub_m2_value) + 2*k;AIC2
BIC2<- 2*colSums(allsub_m2_value) + k*log(N);BIC2
###
allsub_m1_par
allsub_m2_par
save.image("C:/Users/CCSLAB1/Desktop/Computational_Modeling/HW2/HW2.RData")
?suppressWarnings
suppressWarnings()
suppressWarnings
rm(list=ls())
raw_data <- read.table("ra_exampleData.txt", header=T)
source("ra_prospect.R")
subj_list = unique(raw_data$subjID)
N = length(subj_list)  # number of subjects
T = length(raw_data[raw_data$subjID==2,"outcome"]) # number of trials per subject
bound_low <- c(0, 0, 0); bound_up <- c(2, 5, 10)
par_init <- runif(3)*bound_up
rho <- par_init[1]; tau <- par_init[2]; lambda <- par_init[3]
allsub_m1 <- list()
par_init <- runif(3)*bound_up
# loop for subject
for (subj in subj_list){
data <- raw_data[raw_data$subjID==subj,]
attach(data)
m1 <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
#loop for itteration
for (i in 1:50){
par_init <- runif(3)*bound_up
temp_m1 <- optim(par_init, ra_prospect, T=T, method="L-BFGS-B", lower=bound_low, upper=bound_up)
if(temp_m1$value < m1$value){allsub_m1[[subj]] <- temp_m1}
}
detach(data)
}
allsub_m1_par <- c()
allsub_m1_value <- c()
for(subj in subj_list){
allsub_m1_par <- rbind(allsub_m1_par, allsub_m1[[subj]]$par)
allsub_m1_value <- rbind(allsub_m1_value, allsub_m1[[subj]]$value)
}
subj
i
allsub_m1_par
i
